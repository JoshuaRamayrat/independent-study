Operating-System Structures
- OS provides environment for program execution
- designing a new OS is a major task
- goals of system must be defined before
- This chapter explores:
	viewpoint of user
	viewpoint of programmer
	viewpoint of OS designer
	OS services
		how they're provided
		how they're debugged
		methodologies for design

2.1 Operating-System Services
- Figure 2.1: relation of Os services


	User and other system programs

		GUI | batch | command line
			User interfaces

				System Calls
				services
		Program execution|I/O operations|file systems|
		communication|resource allocation|accounting|
		error detection|protection & security

		operating system

	hardware

- user interface
	- all OS's have a user interface
	  that takes several forms
	  	- command-line interface (CLI)
		- batch interface
			commands/directives entered into files
			files execute
		- graphical user interface
			window system
			pointing device to direct I/O
			choose from menues

- program execution
	- load program into memory and run it.
	- program must end its execution
		normally/abnormally(error)

- I/O operations
	- running program may require I/O

- File-system manipulation
	- programs need to
		create files
		delete files
		search files
		list file information
		read files/directories
		write files/directories

- Communications
	- one process -> info exchange with another process
	- shared memory
		2 processes read/write shared section of mem

- Error detection
	- OS must detect and correct errors constantly
	- Errors occur in the CPU & memory hardware

- Resource allocation
	- 

2.2.1 Command Interpreters
- some OS's include the command interpreter in the kernel
- Windows and Unix
	- command interpreter as a special program
	  that is running when a job is initiated
	  or when a user first logs on
- 'shells' - multitude of command interpreters
- several different shells to choose from
	Bourne shell
	C shell
	Bourne-Again shell
	Korn shell
		similar functionality for getting and 
		executing the user-specified command:
			create
			delete
			list
			print
			copy
			execute
			...
				MS-DOS and UNIX shells
- unix command to delete a file
	rm file.txt

2.2.2 Graphical User Interfaces

2.2.3 Choice of Interface
- doesn't really matter it's up to the user
- 'system administrators who manage computers
  power users who have deep knowledge of a system 
  	all frequently use command-line interface

2.3 System Calls
- 'system calls': interface to the services made 
		  available by an operating system
- routines written in C/C++

- illustration of system call usage:
	- write a simple program to read data
	  from one file and copy the data to another file
		- 1st input: name of 2 files
			- input file and output file
		- 1 approach - program asks user for the names
			- sequence of system calls:
				- write prompt message to screen
				- read from keyboard the chars
				  that define the 2 files
- when both files are set up
	- enter a loop that:
		- reads from the input file
		- writes to the output file

	- each read/write must return status info regarding error cond.
		- read:
			end of file reached
			hardware failure in read (parity error)
		- write:
			(various errors, depends on output device)
			no more disk space

	Figure 2.5 Example of how system calls are used
		source file
			Acquire input file name
			write prompt to screen
			accept input
			acquire output file name
			write prompt to screen
			accept input
			open the input file
			if file doesn't exist, abort
			create output file
			if file exists, abort
			loop
			read from input file
			write to output file
			until read files
			close output file
			write completion message to screen
			terminate normally
		destination file


- Even just simple programs make heavy use of the operating system

- systems -> 1000's of system calls/second
- Application Developers use 'application programming interfaces' (API)
	- API: specifies a set of functions
		- parameters passed to functions
		- return values
	- 3 most common APIs
		- Windows API (Windows systems)
		- POSIX API (POSIX-based systems)
			(UNIX, Linux, Mac OS X
		- Java API (Java virtual machine)
	- Operating system provides library of code
		- example:
			libc: programs written in the C language
			for UNIX and Linux
	- functions making up an API
		- invoke actual system calls
		- example:
			Windows function 'CreateProcess()'
			invokes 'NTCreateProcess()' system call
			in the Windows kernel

	- 


2.4 Types of System Calls
- 6 major categories
	process control
	file manipulation
	device manipulation
	information maintenance
	communications
	protection

- system calls are refered to by generic names

2.4.1 Process Control
- running program to halt execution:
	end() 
		normal
	abort()
		abnormal

- system call made to terminate the currently
  running program abnormally
  	- dump of memory taken
	- error message generated

		- debugger examines memory dump
- OS transfers control to the command interpreter
	- for normal/abnormal
- normal and abnormal termination can be defined
	- e.g. 'level 0' error
	- command interpreter uses this error level
	  to determine the next action

- process/job executing a program may want to:
	- 'load()' and 'execute()' another program
- wait or jobs to finish execution
	- 'wait_time()'
- or wait for an event to occur
	- 'wait_event()'
- signal when the event has occurred
	- 'signal_event()'

- quite often: 2 processes may want to 'share data'
	- to ensure integrity, 'lock' the shared data
	- examples:
		- 'acquire_lock()'
		- 'release_lock()'
- for multitasking systems
	- FreeBSD
