UNFINISHED



///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
1. Introduction

- operating system: program to manage hardware
	- intermediary btwn user and hardware
- system structure:
	- system startup
	- I/O
	- storage

- large & complex so it's created piece-by-piece
	- each piece is a well-delineaed portion of the system
	- carefully defined inptus, outputs, & functions

- major components of a computer system
- OS functions

- data structures in OS
- computing environments
- open source OS's

- Abstract view:

	COMPUTER HARDWARE
		OPERATING SYSTEM
			(SYSTEM & APPLICATION PROGRAMS)
			COMPILER
				USER1
			ASSEMBLER
				USER2
			TEXT EDITOR
				USER3
			...
			DATABASE SYSTEM
				USER'N'	

1.1 What Operating Systems Do

- computer system divided into 4 components
	- hardware
	- operating system
	- application programs
	- users

- basic computing resources for system
	- hardware
		- central processing unit (CPU)
		- memory
		- input/output (I/O) devices

	- ways in which resources are used to solve problems
		- application programs
			- word processors
			- spreadsheets
			- compilers
			- web browsers
	- operating system controls hardware
	- OS coordinates use among programs/users
	- OS is analogous to a government
		- provides 'environment' for other programs to work

1.1.1 User View

- OS for a user: monitor, keyboard, mouse, system unit
	- for 'ease of use'

- other cases - users sit at workstations
	- connected to other workstations/servers
	- users have dedicated resources
	- share resources such as:
		- networking
		- servers
		- file servers
		- computer servers
		- print servers

1.1.2 System View

- OS: program most intimately involved w/ hardware
- OS is a 'resource allocator'
- OS manages resources
	CPU time
	memory space
	file-storage space
	I/O devices
	...
- different view - OS needs to control I/O devices and user programs.
	- 'control program'
		- manages user prog. execution
		- operation/control of I/O devices



///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
1.2 Computer-System Organization

- computer system structure must be known before it's way of operation

1.2.1 Computer-System Operation

- general purpose computer:
	- 1+ CPU
	- # of device controllers
		disk drive
		audio device
		video displays
	- common bus to access shared memory
- initial program to start when computer is powered up
	- called a 'bootstrap program'
	- stored in hardware
		read only memory
		electrically erasable programmable read only memory
			"firmware" umbrella term
- bootstrap program must locate the OS kernel and load it into memory
- post-kernel locating
	- 'system programs' outside of the kernel are loaded 
	  into memory at boot time
	- called 'system processes' or 'system daemons'
		- runs the entire time the kernel is running
	- on 'UNIX', the first process is 'init'.
		- init starts other daemons.
	- after the call to 'init', the system is fully booted.
	- system waits for events to occur.
- occurence of an event is signaled by an 'interrupt'
  from either the hardware or software. 
	- hardware interrupt: signal sent to CPU
	- software interrupt: system call/monitor call (special operation)

- process followed for interrupts:
	- CPU is interrupted
	- CPU transfers execution to a fixed location
	- the 'fixed location' contains a starting adress
		- address contains 'service routine' for the interrupt.
	- interrupt service routine (ISR) executes
	- upon completion of ISR, CPU resumes interrupted computation

- interrupts are very important
	- interrupts -> interrupt service routine
	- generic routine invoked to examine interrupt info.

1.2.2 Storage Structure
- CPU loads instructions only from memory
- programs must be stored in memory then

- "random-access memory" (RAM)
	- main memory
	- programs are run from rewritable memory

- main memory -> 
	semiconductor technology dynamic random-access memory (DRAM)
	
- ROM can't be changed
	- static programs are stored here (e.g. bootstrap)
	- EEPROM is changed infrequently
		e.g. smartphones EEPROM for factory-programs

- all forms of memory provide an 'array of bytes'
	- each byte has its own address.
- 'load' or 'store' instructions to specific memory addresses
  provide a mean for interaction
	- load -> move word from main memory to an internal register
	- store -> move register content to main memory
- von Neumann architecture
	- instruction-execution cycle:
		- instruction fetched from memory
		- stored in the instruction register
		- instruction is decoded
		- operands fetched from memory
		- operands stored in some internal register

- the 'memory unit' sees only a stream of memory addresses
  It doesn't know how they are generated
  	instruction counter
	indexing
	indirection
	literal addresses

	instructions
	data

- Interested in sequence of memory addresses
- programs and data -> main memory permanently
- 

1.2.3 I/O Structure
- Storage - 1 of many types of I/O devices
- most of OS code - managing I/O
	- device nature varies
	- system performance and reliability depends on it
- general-purpose computer system
	- multiple CPUs
	- multiple device controllers
		- all connected through a common bus

- each 'device controller' is in charge of a specific device
- >1 device to a controller is possible
	- example:

	small computer-systems interface (SCSI) controller
		7+ devices

- starting an I/O operation
	- device driver loads device controller register
	- 



///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
1.3 Computer System Architecture

- computer systems can be organized in many wys
- categorized based on # of general-purpose processors

1.3.1 Single-Processor Systems

- almost all single-processor systems have other special-purpose
  processors as well.
  	- device-specific processors
		disk
		keyboard
		graphics controllers
	  (mainframes)
	  	I/O processors

- special-purpose processors run a limited instruction set
  they don't run user processes. 

- OS sends info about next task and monitors status
- 

1.3.2 Multiprocessor Systems
- multiprocessor systems
	parallel systems
	multicore systems

	Dominate computing landscape
	Recently appearing in smartphones and tablets

- advantages:
	increased throughput
	economy of scale
	increased reliability

- "graceful degradation"
	- providing service proportional to the 
	  level of surviving hardware

- "fault tolerant"
	- suffer failure of any single component and
	  still continue operation
- example: "HP NonStop"
	- uses hardware and software duplication
		- continued operation despite faults
	- multiple pairs of CPUs work in lockstep

- two types of "multiple-processor systems"
	- asymmetric multiprocessing
		- each processor is assigned a specific task
		- boss processor controls the system
		- other processors look to the boss
		  for instructions
		  	(or have 'predefined tasks')
		- "boss-worker relationship"
	- symmetric multiprocessing (SMP)
		- all processors are peers
		- perform all tasks of the OS
		- no boss-worker relationship
		- own set of registers & private cache
		- processors must share certain
		  data structures to avoid inefficiencies
		  such as idle and overloaded CPUs
		- 



///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
1.4 Operating-System Structure
- important aspect of OS 
	- multiprogramming
	- single program can't keep CPU and IO devices busy
	- jobs (code & data) are organized so that
	  the CPU always has one to execute.

- the OS keeps jobs in memory simultaneously
- main memory is too small
	- jobs are kept in the 'job pool'
	- 'job pool': processes reside on the 'disk'
- in multiprogrammed systems, the OS switches and executes
  another job.

- various system resources:
	CPU
	memory
	peripheral devices
		are utilized effectively.

- 'Time sharing' (multitasking): CPU executes multiple jobs
  but very quickly. The user can interact w/ each program
  
  	- requires an 'interactive' computer system. 
	  Direct communication btwn user & system.
	- 'response time' should be short (< 1 sec)

	- many users can share the computer simultaneously.
	- system switches rapidly from one user to the next.

- each user has at least 1 program in memory
- programs loaded & executed in memory are called a 'process'

- 'Time-sharing' & 'multiprogramming' requires that several
  jobs be kept in memory
- 'job scheduling' is the process of deciding which
  jobs are brought into memory
- 'CPU scheduling' is the process of choosing which
  job will run 1st.

- time sharing system:
	- reasonable response times are accomplished
	  by 'swapping'. Processes are swapped in and out
	  of main memory to the disk.
	- 'virtual memory': execution of a process that is
	  not completely in memory. 
	  Programs larger than actual physical memory can be run.
	- main memory is abstracted
		- large, uniform array of storage
		- logical memory from physical memory
	- file system provided along with following features:
		- on a collection of disks.
		- disk management
		- resource protection
		- job synchronization
		- job communication
		- deadlock prevention



///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
1.5 Operating-System Operations

- OS's are interrupt driven
- events are signaled by 
	- traps: software interrupt created by an error
	  or a call to an OS serice by the user program.
	- interrupts
- General structure of a system is dictated by the 
  OS's interrupt-driven nature
- errors in one program should only affect that single program
  and not other processes in other programs
  	example:
	- a process stuck in an infinite loop could
	  affect affect other process operations

- properly designed OSs prevent this type of occurence.

1.5.1 Dual-Mode and Multimode Operation
- distinguish between
	- operating system code execution
	- user-defined code execution

- two separate modes of operation:
	- user mode
	- kernel mode 
		(also called)
		supervisor mode
		system mode
		privileged mode

- dual modes of operation allow the OS to protect
  from errant users.
  	- harmful instructions are 'privileged instructions'
	- 'privileged instructions are only executed
	  in kernel mode. 
	  	- executing in user mode traps it in the OS

- switching to kernel mode is a 'privileged instruction'
- other examples:
	I/O control
	timer management
	interrupt management
	...
- extension beyond 2 modes:
	- virtual machine manager VMM
	- virtualization management software

1.5.2 Timer
- OS must maintain control over the CPU
- user programs can't get stuck in an infinite loop
  or fail to call system services and never
  return control the OS.
	- use a timer
- timers are set to interrupt the computer after a 
  specified period
- period may be fixed
- variable timer - implemented by a 
  fixed rate clock and a counter
- OS sets the counter
	- interrupt occurs when counter = 0
- 



///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
1.6 Process Management

- programs do nothing unless CPU executes instruction

- time-shared user program
	- compiler
	- called a 'process'

- a 'process':
	- job
	- time-shared program
	- actually a very general concept

- Chapter 3:
	- system calls to allow processes to create
	  subprocesses to execute concurrently.

- processes need certain resources to accomplish their task
	CPU time
	memory
	files
	IO devices

	initialization data is also passed along

- programs by themselves are not processes:
	- passive entity: a program like file stored on a disk
	- active entity: a process

- single-threaded processes have 1 program counter
  to specify the next instruction to execute.

- 1 instruction is executed on behalf of the process
- 2 processes may be associated with the same program
	- 2 separate execution sequences.
- multithreaded process
	- multiple program counters
	- each points to the next instruction
	  to execute for a given thread.

- process:
	- unit of work in a system
	- system: collection of processes
	- processes:
		user processes
		operating system processes
	- processes can execute concurrently
		- multiplexing on a single CPU

- operating system responsible for:
	- scheduling processes and threads on the CPUs
	- creating & deleting both user and system processes
	- suspending & resuming processes
	- mechanism for process syncrhonization
	- mechanism for process communication



///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
1.7 Memory Management

- main memory: central to operation
	- large array of bytes (100 to billions)
	- each byte: own address
	- repository of data for CPU and IO device access

- central processor:
	- instruction-fetch cycle
	- data-fetch cycle 

- main memory: the only large storage device
  the CPU is able to address and access directly.

- everything must be in main memory for the CPU to acces them

- program execution:
	mapped to absolute addresses
	loaded into memory

- several programs kept in memory to increase CPU utilization
  and speed

- 'hardware' design of the system is important for:
	memory-management schemes
	algorithms used for management schemes

- OS responsibility for memory management:
	
	keeping track of which parts of memory
	are being used and who uses them

	deciding which process & data to move into/out
	of memory

	de/allocate memory space as needed




///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
1.8 Storage Management

- To make the computer system convenient
	- OS: logical & uniform view of info storage.
	- 'the file' - logical storage unit that serves as 
		       an abstraction of the physical properties
		       of a storage device.

1.8.1 File-System Management
- File management - most visible component of an OS
- computers store info on different types of physical media
- files represent programs and data
- Data files can be:
	- numeric
	- alphabetic
	- alphanumeric
	- binary
- files can also be:
	free-form: e.g. text files
	fixed: e.g. fixed fields
- files are organized into directories b/c it makes them easier to use.
- desirable to control which user may access a file
  and how that user may access it
  	- read
	- write
	- append

- OS is responsible for the following activities 
  in connection w/ file management:
  	- creating and deleting files
	- creating and deleting directories to organize files
	- supporting primitives for manipulating files and directories
	- mapping files onto 2ndary storage
	- backing up files on stable (nonvolatile) storage media
- File-management techniques are discussed in CH11 and 12


1.8.2 Mass-Storage Management
- main memory is too small to accommodate all data and programs
- data it holds are lost when power is lost
	- 2ndary storage to back up main memory is needed

- disks -> principle on-line storage medium 
		for programs & data
- programs such as :
	compilers
	assemblers
	word processors
	editors
	formatters
		- stored on a disk until loaded into memory
- disk is used as source & destination
- very important - disk storage management

- OS activities for disk management:
	- free-space management
	- storage allocation
	- disk scheduling

- speed of operation of a computer hinges on the speeds of the disk
  subsystem and algorithms to manipulate it

- uses for storage
	- disk data backup
	- storage of seldom-used data
	- long-term archieval storage

- tertiary storage devices
	magnetic tape drives
	tapes
	CD drives
	DVD drives
	platters

1.8.3 Caching
- important principle of computer systems
- information is kept in a storage system (main memory)
- cache is a 'fast storage system'
- information is in either:
	- the source (checked 2nd)
	- the cache (checked 1st)

- internal programmable registers
	- index registers
	- high-speed cache for main memory

- programmer
	register-allocation algorithms
	register-replacement algorithms
		which info to keep in
			registers
			main memory

- caches have limited size
	- cache management is important
- 

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
1.11.8 Real-Time Embedded Systems

- most prevalent form of computers
- found everywhere:
	car engines
	manufacturing robots
	DVDs
	microwave ovens

- specific tasks
- usually little or no user interface
- monitors and manages hardware devices
	automobile engines
	robotic arms

- embedded systems vary considerably
	- general-purpose computer with Linux OS
	- special-purpose embedded OS with just functionality

- hardware devices with application-specific integrated circuits
  ASICs to perform tasks without an OS

- computerizing an entire house
	heating control
	lighting control
	alarm system
	coffee maker
	refrigerator

- embedded systems always run on 'real-time operating systems'
	- rigid time requirements on processor operation and data flow
	- sensor data to computer
	- computer analyzes data and adjusts control of sensor input

- examples of real-time systems
	- systems controlling scientific experiments
	- medical imaging systems
	- industrial control systems
	- display systems
	- automobile-engine fuel-injection systems
	- home-appliance controllers
	- weapon systems

- real-time system: well-defined, fixed time constraints
	- processing done within time constraints.
	- only functions correctly if results are delivered in time. 

- CH6: scheduling facility to implement real-time functionality in an OS
- CH9: memory management design for real-time computing.
- CH18-19: real-time components for Linux and Windows7 OS.
